<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Quartus Timing Analysis 卡在 99&amp;percnt;</title>
    <url>/2019/04/quartus_stuck/</url>
    <content><![CDATA[<p>程序看上去运行正常，没有任何报错。但是一编译就会卡在 Timing Analysis 99%，无法正常使用。</p>
<p>原因是相应器件库文件损坏，重装器件库后问题解决。</p>
]]></content>
      <tags>
        <tag>Electronic</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server更改计算机名后设置</title>
    <url>/2019/03/sqlserv_chg_name/</url>
    <content><![CDATA[<p>更改计算机名后，SQL Server 仍能通过 Windows 身份验证登录，但在执行部分操作时会报用户不存在/计算机名不正确等问题，需要手动进行设置。</p>
<span id="more"></span>
<ol>
<li>若 SQL Server 设置为“仅 Windows 身份验证”登录，则先启用“SQL Server 身份验证”登录，再启用 sa 账户并设置密码，重启 SQL Server</li>
<li>在 SMSS 中使用 sa 登录，将“安全性/登录名”中的各个账户中的旧计算机名重命名为新的计算机名</li>
<li>在 master 数据库下执行以下 SQL 语句，重启 SQL Server：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_dropserver <span class="string">&#x27;旧计算机名&#x27;</span></span><br><span class="line">go</span><br><span class="line">sp_addserver <span class="string">&#x27;当前计算机名&#x27;</span>,<span class="string">&#x27;LOCAL&#x27;</span></span><br></pre></td></tr></table></figure>

<p>旧计算机名可通过<code>select @@SERVERNAME</code>获得，当前计算机名可通过<code>select SERVERPROPERTY(&#39;servername&#39;)</code>获得。</p>
]]></content>
  </entry>
  <entry>
    <title>Dell 预装的 SmartByte 导致远程桌面加密错误</title>
    <url>/2019/04/dell_smartbyte/</url>
    <content><![CDATA[<p>一 Dell 电脑，远程桌面工作不正常，只能在本地子网连接，否则提示加密错误。卸载掉预装的 SmartByte 后解决。</p>
<p>Ref: <a target="_blank" rel="noopener" href="https://www.v2ex.com/amp/t/490806">Dell 用户请注意你电脑上的 SmartByte 程序</a> | <a target="_blank" rel="noopener" href="https://web.archive.org/web/20211123175945/https://www.v2ex.com/amp/t/490806">Archive</a></p>
]]></content>
      <tags>
        <tag>RDP</tag>
        <tag>Preinstall</tag>
      </tags>
  </entry>
  <entry>
    <title>在 64 位 Windows 下“无缝”运行 16 位程序</title>
    <url>/2019/03/16bit_on_win64/</url>
    <content><![CDATA[<p>使用 <a target="_blank" rel="noopener" href="https://github.com/otya128/winevdm">otvdm</a> 可以实现在资源管理器和命令行中直接启动 Windows 3.x 程序</p>
<p>使用 <a target="_blank" rel="noopener" href="https://github.com/leecher1337/ntvdmx64">ntvdmx64</a> 可以实现在资源管理器和命令行中直接启动 DOS 程序<br>在 <a target="_blank" rel="noopener" href="http://www.columbia.edu/~em36/ntvdmx64.html">http://www.columbia.edu/~em36/ntvdmx64.html</a> 可以下载到编译好的二进制文件</p>
<p>Windows Vista 及以后的操作系统不会使用 PC Speaker，如果需要使其发声，可以到<a target="_blank" rel="noopener" href="http://www.waldbauer.com/tmp/reference.php">这里</a>下载 BEEPx64</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>转移 Installer 文件夹造成 Win10 更新出现错误</title>
    <url>/2019/06/installer_80070032/</url>
    <content><![CDATA[<p>若利用 Junction 或 Symbolic link 转移了 Installer 文件夹，安装部分累计更新时可能会出现 0x80070032 错误。</p>
<span id="more"></span>
<p>CBS.log 内容如下：</p>
<blockquote>
<p>2019-06-25 20:35:18, Error                 CSI    00000008 (F) Error: ResolvePendingTransactions called after poqexec failure (call 1)<br>   Status = STATUS_NOT_SUPPORTED, Operation = SetFileInformation, DiagString = [l:34]’??\C:\WINDOWS\Installer, N/A, N/A’[gle=0x80004005]</p>
</blockquote>
<p>由上可知，软连接和符号链接由于不支持某个特殊文件属性的设置造成出错。目前只能先删除链接，建立一个空的 Installer 文件夹，等更新完成后再重新建立链接。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Windows Update</tag>
      </tags>
  </entry>
  <entry>
    <title>用 ext2fsd 读取新版 Linux 系统的 ext4 分区</title>
    <url>/2019/06/ext2fsd_ext4/</url>
    <content><![CDATA[<p>新版 Linux 系统 (Debian/Ubuntu) 格式化的 ext4 分区默认开启了 64bit 和 metadata_csum 特性，而 ext2fsd 不支持这些特性。要用 ext2fsd 读写数据必须关闭这些特性。</p>
<span id="more"></span>
<p>关闭方法：</p>
<ul>
<li><p>用 LiveCD 启动，依次执行</p>
<ol>
<li>e2fsck -y /dev/sd<em>xY</em></li>
<li>tune2fs -O ^metadata_csum /dev/sd<em>xY</em></li>
<li>resize2fs -s /dev/sd<em>xY</em></li>
</ol>
</li>
<li><p>若系统有 initramfs 也可以通过 grub 按<code>e</code>在 cmdline 最后添加 break，进入 initramfs 进行操作</p>
</li>
</ul>
<p>需要注意的是，一般 initramfs 里面没有 tune2fs 和 resize2fs，此时可以先挂载 Linux 系统分区，从中复制这两个二进制文件到<code>/usr/sbin</code>，再卸载系统分区执行相应操作。</p>
]]></content>
  </entry>
  <entry>
    <title>IIS 10 安装 myrtille 遇到 1001 错误</title>
    <url>/2019/08/iis_1001/</url>
    <content><![CDATA[<p>已安装完所有需要的依赖项，但安装 myrtille 时仍报错：</p>
<blockquote>
<p>error 1001 : some or all identity references could not be translated</p>
</blockquote>
<span id="more"></span>
<p>解决方法</p>
<ul>
<li>打开“服务”，找到 “IIS Admin Service”，启动该服务</li>
<li>如果没有 “IIS Admin Service”，安装 Windows 功能 “IIS Metabase and IIS 6 configuration compatibility”</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>移动 ProgramData\Package Cache 文件夹</title>
    <url>/2019/08/mv_pagcache/</url>
    <content><![CDATA[<p>安装完某些软件后，系统盘里面 Package Cache 文件夹会变得异常巨大，占据宝贵的 SSD 空间。</p>
<span id="more"></span>
<p>把文件夹拷贝到其他位置之后，进行如下操作：（以转移到 “E:\ProgramData\Package Cache” 为例）</p>
<ol>
<li>打开 regedit，定位到 “HKLM\SOFTWARE\Policies\WiX\Burn” （没有则新建项）</li>
<li>添加一 REG_SZ 类型名为 PackageCache 的条目，值为 “E:\ProgramData\Package Cache”</li>
<li>用<code>mklink /J &quot;C:\ProgramData\Package Cache&quot; &quot;E:\ProgramData\Package Cache&quot;</code>或其他方法建立链接</li>
<li>打开 “C:\ProgramData” 的高级权限设置，添加主体为 “Everyone” 的拒绝项，只应用到当前文件夹，权限只勾选 “删除子文件夹和文件”</li>
<li>打开 “C:\ProgramData\Package Cache” 的高级权限设置，添加主体为 “Everyone” 的拒绝项，只应用到当前文件夹，权限只勾选“删除”</li>
</ol>
<p>注</p>
<ul>
<li>新版 WiX 安装程序支持通过注册表指定 PackageCache 位置，旧版位置固定为 “%ALLUSERSPROFILE%\Package Cache”</li>
<li>安装程序在进行修改/卸载操作最后会尝试删除 “%ALLUSERSPROFILE%\Package Cache” 目录，若其为非空文件夹，删除会失败，但在建立链接后，这项操作会导致建立的链接被删除，因此需要设置权限防止其被删除</li>
<li>在 Windows 下要阻止文件被删除但不阻止其他操作，需要对该文件和<strong>所属文件夹</strong>同时添加关于删除的拒绝项</li>
<li>Windows 10 大版本更新时 “C:\ProgramData” 的权限设置会恢复默认</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>得力3958考勤机破解管理员</title>
    <url>/2021/05/deli_3958/</url>
    <content><![CDATA[<p>该型号机器不像其他得力考勤机一样有 8181 后门密码，因此破解相对困难。通过拆机发现，机器的固件和数据都存放在一块 T25S32 4MB SPI flash 中，只要对 flash 中的用户权限部分进行修改，就能实现管理员破解。</p>
<span id="more"></span>
<p>这个方法需要知道一个已有普通员工的指纹或密码。首先，获取并记录该员工的工号。然后，DUMP 出 flash 的内容，用十六进制编辑器打开并搜索可能和用户权限设定有关的部分。</p>
<p>通过搜索发现，flash 中 0x1f2000 开始的一段区域存储了用户的权限设定，每条记录以工号开始，以‘0D 0A 27’结束。记录的第八个字节表示权限，0x11 为普通员工，0x15 则为超级管理员。</p>
<img data-src="/images/userinfo.png" width="50%" height="50%" title="userinfo" alt="userinfo"/>

<p>把工号对应的 0x11 修改成 0x15，将修改后的内容刷回 flash，就能获得管理员权限。</p>
<p>注意直接使用编程器夹会无法正常写入，需要首先短路 CPU 的晶振使其停止工作。另外，如果已知通讯密码，可以直接用电脑端软件 “excelp2p” 对用户信息进行修改。</p>
]]></content>
  </entry>
  <entry>
    <title>Intel 无线网卡 obcaseinsensitive=0 时罢工</title>
    <url>/2021/06/Intel_wireless_error10/</url>
    <content><![CDATA[<p>设置下面的注册表项关闭 “非 Windows 子系统不要求区分大小写” 后 Intel 无线网卡会罢工，显示<code>错误 10</code>。</p>
<blockquote>
<p>HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\obcaseinsensitive = dword:0</p>
</blockquote>
<span id="more"></span>
<img data-src="/images/AX201.png" width="50%" height="50%" title="Code 10" alt="Code 10"/>

<p>同时事件管理器中会有如下的报错：</p>
<blockquote>
<p>Could not allocate the resources necessary for operation.<br>The network adapter has returned an invalid value to the driver.<br>The version number is incorrect for this driver.</p>
</blockquote>
<p>旧版 Intel 无线驱动没有该问题，目前版本 &ge;20.100 的驱动均存在这一问题。</p>
<p>解决：用<code>bcdedit</code>把<code>systemroot</code>设置成正确的大小写。默认情况下这个变量里面第一个 w 是小写的，但系统盘里面的 <strong>W</strong>indows 目录是首字母大写的。设置区分大小写会导致 Intel 无线驱动找不到相应的文件，因此无线网卡无法工作</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> &#123;current&#125; systemroot \Windows</span><br></pre></td></tr></table></figure>

<p>另外，设置区分大小写还会导致 .NET Framework 3.5 以及部分可选功能安装失败，报错 0x80070003。必须设置为不区分大小写才能成功安装，安装完成后可以重新改回区分大小写。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>将 Windows 默认管理员账户恢复为本地用户</title>
    <url>/2021/10/administrator_revert/</url>
    <content><![CDATA[<p>使用默认 Administrator 账户登录应用商店等微软服务时，一个不小心本地账户就会变成 Microsoft 账户。这种情况下部分内置功能会工作不正常，出现闪退等问题，同时设置菜单中没有修改回本地账户的选项。</p>
<span id="more"></span>
<p>方法：使用 cmd 命令删除下列三个注册表键，重启即可</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">reg delete HKU\S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-<span class="number">500</span>\Software\Microsoft\IdentityCRL\TokenBroker /f</span><br><span class="line">reg delete HKU\S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-<span class="number">500</span>\Software\Microsoft\IdentityCRL\InterruptState /f</span><br><span class="line">reg delete HKU\S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">18</span>\Software\Microsoft\IdentityCRL\StoredIdentities\xx@outlook.com /f</span><br></pre></td></tr></table></figure>

<p>其中 S-1-5-21-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-500 是默认管理员账户的 SID，可以通过<code>whoami /USER</code>得到，<a href="mailto:&#x78;&#x78;&#x40;&#x6f;&#x75;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#x78;&#x40;&#x6f;&#x75;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#109;</a> 是登录的微软帐号名</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 控制台登录无法找到音频设备</title>
    <url>/2021/12/console_security/</url>
    <content><![CDATA[<p>现象：启动时登录界面出现 “your device is rebooting to perform some configuration tasks” ，重启后所有音频输入输出设备消失。设备管理器显示声卡驱动工作正常，甚至可以在“Audio inputs and outputs”里面看到相应的设备。如果使用远程桌面连接到这台计算机并且设置“在远程机器上播放音频”，声音可以正常使用。</p>
<span id="more"></span>
<p>原因是注册表中的 “ConsoleSecurity” 被系统设置成了空值，恢复默认值后问题消失。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Terminal Server\WinStations]</span><br><span class="line">&quot;ConsoleSecurity&quot;=hex:01,00,14,80,9c,00,00,00,a8,00,00,00,00,00,00,00,14,00,00,\</span><br><span class="line">  00,02,00,88,00,06,00,00,00,00,00,14,00,01,00,00,00,01,01,00,00,00,00,00,05,\</span><br><span class="line">  04,00,00,00,00,00,14,00,bf,03,0f,00,01,01,00,00,00,00,00,05,12,00,00,00,00,\</span><br><span class="line">  00,14,00,89,00,0f,00,01,01,00,00,00,00,00,05,13,00,00,00,00,00,14,00,81,00,\</span><br><span class="line">  00,00,01,01,00,00,00,00,00,05,14,00,00,00,00,00,18,00,bf,03,0f,00,01,02,00,\</span><br><span class="line">  00,00,00,00,05,20,00,00,00,20,02,00,00,00,00,18,00,21,01,00,00,01,02,00,00,\</span><br><span class="line">  00,00,00,05,20,00,00,00,2b,02,00,00,01,01,00,00,00,00,00,05,12,00,00,00,01,\</span><br><span class="line">  01,00,00,00,00,00,05,12,00,00,00</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>DD-WRT 设置全区(#a)</title>
    <url>/2019/06/ddwrt_allregion/</url>
    <content><![CDATA[<p>博通芯片的无线路由器刷 DD-WRT 之后，无线设置的区域中没有全区。若用<code>nvram set</code>手动设置 ccode 和 regrev，重启后设置会被 DD-WRT 复原，使用<code>wl country</code>可以改变区域，但无法将区域改为 #a 或 #r。</p>
<span id="more"></span>
<p>通过查看源码发现，这个限制位于内核模块 wl.ko 中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">wlc_cntry_external_to_internal</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> buflen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> err = BCME_OK;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Translate ALL or RDR to internal 2 char country codes. */</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strncmp</span>(buf, <span class="string">&quot;ALL&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;ALL&quot;</span>) - <span class="number">1</span>)) &#123;</span><br><span class="line">		<span class="built_in">strncpy</span>(buf, <span class="string">&quot;#a&quot;</span>, buflen);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(buf, <span class="string">&quot;RDR&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;RDR&quot;</span>) - <span class="number">1</span>)) &#123;</span><br><span class="line">		<span class="built_in">strncpy</span>(buf, <span class="string">&quot;#r&quot;</span>, buflen);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(BCMDBG) &amp;&amp; !defined(WLTEST)</span></span><br><span class="line">	<span class="comment">/* Don&#x27;t allow ALL or RDR in production. */</span></span><br><span class="line">	<span class="keyword">if</span> ((!<span class="built_in">strncmp</span>(buf, <span class="string">&quot;#a&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;#a&quot;</span>) - <span class="number">1</span>)) || (!<span class="built_in">strncmp</span>(buf, <span class="string">&quot;#r&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;#r&quot;</span>) - <span class="number">1</span>))) &#123;</span><br><span class="line">		err = BCME_BADARG;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* !defined(BCMDBG) &amp;&amp; !defined(WLTEST) */</span></span></span><br><span class="line">	<span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此用 IDA 打开 wl.ko，搜索 “#a”，找到和源码匹配的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; =============== S U B R O U T I N E =======================================</span><br><span class="line"></span><br><span class="line">; Attributes: bp-based frame</span><br><span class="line"></span><br><span class="line">_2394                                   ; CODE XREF: _2369+A4↑p</span><br><span class="line">                                        ; _2393+154↓p ...</span><br><span class="line">                MOV             R12, SP</span><br><span class="line">                STMFD           SP!, &#123;R4,R5,R11,R12,LR,PC&#125;</span><br><span class="line">                SUB             R11, R12, #4</span><br><span class="line">                MOV             R5, R1</span><br><span class="line">                MOV             R1, #:lower16:_994_14 ; &quot;ALL&quot;</span><br><span class="line">                MOV             R2, #3  ; size_t</span><br><span class="line">                MOVT            R1, #:upper16:_994_14 ; &quot;ALL&quot;</span><br><span class="line">                MOV             R4, R0</span><br><span class="line">                BL              strncmp</span><br><span class="line">                CMP             R0, #0</span><br><span class="line">                BNE             loc_1C5CE0</span><br><span class="line">                MOV             R1, #:lower16:_1048_10 ; &quot;#a&quot;</span><br><span class="line">                MOV             R2, R5  ; size_t</span><br><span class="line">                MOVT            R1, #:upper16:_1048_10 ; &quot;#a&quot;</span><br><span class="line">                MOV             R0, R4  ; char *</span><br><span class="line">                BL              strncpy</span><br><span class="line">                B               loc_1C5D10</span><br><span class="line">; ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">loc_1C5CE0                              ; CODE XREF: _2394+28↑j</span><br><span class="line">                MOV             R1, #:lower16:_1059_8 ; &quot;RDR&quot;</span><br><span class="line">                MOV             R2, #3  ; size_t</span><br><span class="line">                MOVT            R1, #:upper16:_1059_8 ; &quot;RDR&quot;</span><br><span class="line">                MOV             R0, R4  ; char *</span><br><span class="line">                BL              strncmp</span><br><span class="line">                CMP             R0, #0</span><br><span class="line">                BNE             loc_1C5D10</span><br><span class="line">                MOV             R1, #:lower16:_1070_8 ; &quot;#r&quot;</span><br><span class="line">                MOV             R2, R5  ; size_t</span><br><span class="line">                MOVT            R1, #:upper16:_1070_8 ; &quot;#r&quot;</span><br><span class="line">                MOV             R0, R4  ; char *</span><br><span class="line">                BL              strncpy</span><br><span class="line"></span><br><span class="line">loc_1C5D10                              ; CODE XREF: _2394+40↑j</span><br><span class="line">                                        ; _2394+5C↑j</span><br><span class="line">                MOV             R1, #:lower16:_1048_10 ; &quot;#a&quot;</span><br><span class="line">                MOV             R2, #2  ; size_t</span><br><span class="line">                MOVT            R1, #:upper16:_1048_10 ; &quot;#a&quot;</span><br><span class="line">                MOV             R0, R4  ; char *</span><br><span class="line">                BL              strncmp</span><br><span class="line">                CMP             R0, #0</span><br><span class="line">                BEQ             loc_1C5D48</span><br><span class="line">                MOV             R1, #:lower16:_1070_8 ; &quot;#r&quot;</span><br><span class="line">                MOV             R0, R4  ; char *</span><br><span class="line">                MOVT            R1, #:upper16:_1070_8 ; &quot;#r&quot;</span><br><span class="line">                MOV             R2, #2  ; size_t</span><br><span class="line">                BL              strncmp</span><br><span class="line">                CMP             R0, #0</span><br><span class="line">                BNE             loc_1C5D50</span><br><span class="line"></span><br><span class="line">loc_1C5D48                              ; CODE XREF: _2394+8C↑j</span><br><span class="line">                MOV             R0, #0xFFFFFFFE</span><br><span class="line">                LDMFD           SP, &#123;R4,R5,R11,SP,PC&#125;</span><br><span class="line">; ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">loc_1C5D50                              ; CODE XREF: _2394+A8↑j</span><br><span class="line">                MOV             R0, #0</span><br><span class="line">                LDMFD           SP, &#123;R4,R5,R11,SP,PC&#125;</span><br><span class="line">; End of function _2394</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将<code>MOV R0, #0xFFFFFFFE</code>(<code>01 00 E0 E3</code>)改成<code>MOV R0, #0x0</code>(<code>00 00 A0 E3</code>)即可。<br>最后使用 <a target="_blank" rel="noopener" href="https://github.com/rampageX/firmware-mod-kit">firmware-mod-kit</a> 替换 wl.ko，重新打包并刷入，使用<code>wl country ALL</code>即可设置成全区</p>
<p>更新：如果修改 wl.ko 后执行<code>wl country ALL</code>仍然提示<code>wl: Bad Argument</code>，则说明无线网卡在固件层面有限制，这种情况可以尝试使用旧版无线固件，或改到最大允许发射功率较大的地区（2.4G:<code>wl country AU/30</code>; 5G:<code>wl country US/0</code>）。</p>
]]></content>
  </entry>
  <entry>
    <title>Windows 添加 flag emoji 支持</title>
    <url>/2022/02/win_flags/</url>
    <content><![CDATA[<p>Windows 默认的 “Segoe UI Emoji” 字体中没有相应的字形，因此无法显示 emoji 旗帜。通过添加这些缺失的字形，就可以让 Windows 支持国旗显示。</p>
<span id="more"></span>
<h1 id="fontTools"><a href="#fontTools" class="headerlink" title="fontTools"></a>fontTools</h1><p>fontTools 是一个基于 Python 的字体编辑工具，可以通过 <code>pip install fonttools</code> 安装。安装完成后就可以在命令行里使用 pyfttools 提供的一些工具：</p>
<h2 id="ttx"><a href="#ttx" class="headerlink" title="ttx"></a>ttx</h2><p>该命令可以将 TrueType / OpenType 字体“反编译”成可以直接用文本编辑器打开的 XML 文档，其后缀名为 ttx。也可以把修改后的 ttx 文件重新“编译”回 ttf。</p>
<h2 id="pyftmerge"><a href="#pyftmerge" class="headerlink" title="pyftmerge"></a>pyftmerge</h2><p>该命令用于合并字体。但是这里我们无法使用这个命令把其他字体的字形合并到 “Segoe UI Emoji” 中，因为 pyftmerge 不支持对 CPAL/COLR 表进行合并。</p>
<h1 id="OpenType"><a href="#OpenType" class="headerlink" title="OpenType"></a>OpenType</h1><p>关于 OpenType 规范的详细介绍，可以参考微软的文档 <a target="_blank" rel="noopener" href="https://docs.microsoft.com/en-us/typography/opentype/spec/">https://docs.microsoft.com/en-us/typography/opentype/spec/</a></p>
<p>OpenType 字体中有多种不同类型的表格，我们主要关注下面几张表：</p>
<h2 id="cmap"><a href="#cmap" class="headerlink" title="cmap"></a>cmap</h2><p>指定某个码位对应的字形。不是所有的字形都会对应一个码位，但是每个在 cmap 表中声明的码位都需要对应一个字形（可以重复）。如果我们需要添加字形的 Unicode 码在原字体中不存在，就需要手动添加。某些字体可能会存在多张对应不同区域和语言的映射表，需要在所有映射表都加上相应的码位。一些防复制方案就是通过混淆 cmap 来实现的，可以实现选中复制后的文本和原始显示完全不同。</p>
<h2 id="hmtx"><a href="#hmtx" class="headerlink" title="hmtx"></a>hmtx</h2><p>指定每个字形的垂直度量。如果修改之后的字体的宽度和间距过宽或过窄，就说明这个表中的数值存在问题。</p>
<h2 id="glyf"><a href="#glyf" class="headerlink" title="glyf"></a>glyf</h2><p>包含字形数据，每个字形都由一系列 XY 座标点组成的轮廓构成。</p>
<h2 id="GSUB"><a href="#GSUB" class="headerlink" title="GSUB"></a>GSUB</h2><p>定义了字形的替换规则。一类比较常见的字形替换是连字：当多个字形按照指定的顺序依次出现时，将其替换成另一个字形。国旗 emoji 没有单独的 Unicode 码位，就是通过连字实现。比如 “🇹” 和 “🇼” ，连在一起就会变成 “🇹🇼”。</p>
<h1 id="彩色字形"><a href="#彩色字形" class="headerlink" title="彩色字形"></a>彩色字形</h1><p>Apple, Google, Microsoft 和 Mozilla 都提出了自己的彩色字形标准。通常情况下，相应平台对自己格式的支持是最好的，对于其他格式的支持则极为有限。有部分软件自己实现了字体渲染，导致它们可以支持一些原本平台不支持的格式，比如 Adobe 和 Mozilla 的软件就会支持 SVG 。</p>
<h2 id="CBDT-CBLC"><a href="#CBDT-CBLC" class="headerlink" title="CBDT/CBLC"></a>CBDT/CBLC</h2><p>由 Google 提出，允许在字体中嵌入彩色位图。可以看作是 EBDT/EBLC 的升级版。</p>
<h2 id="sbix"><a href="#sbix" class="headerlink" title="sbix"></a>sbix</h2><p>由 Apple 提出，也是一个基于位图的方案，原理和 Google 几乎没有区别。</p>
<h2 id="CPAL-COLR"><a href="#CPAL-COLR" class="headerlink" title="CPAL/COLR"></a>CPAL/COLR</h2><p>由 Microsoft 提出，彩色字形中的单个颜色作为一个“图层”存储于 glyf 中。CPAL 包含了各个颜色索引值所对应的颜色。COLR 则指定了某个字形由那些“图层”构成，以及各“图层”的颜色索引值。</p>
<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>由 Adobe 和 Mozilla 提出，通过直接在文件中嵌入 svg 来显示彩色字形。相比其他方案，SVG 的功能最为齐全，甚至可以实现动画等特殊效果。</p>
<h1 id="修改要点"><a href="#修改要点" class="headerlink" title="修改要点"></a>修改要点</h1><p>为了可以在 Windows 中使用，我们需要一个使用 CPAL/COLR，并且包含国旗 emoji 的字体。<a target="_blank" rel="noopener" href="https://github.com/mozilla/twemoji-colr">TwemojiMozilla</a> 是一个使用 CPAL/COLR 的 Twitter emoji 字体，我们将其中的国旗 emoji 提取出来，添加到 “Segoe UI Emoji” 字体中。</p>
<p>使用 DirectDraw 的程序可以显示彩色 emoji，如果程序不支持 DirectDraw，只能显示黑白的 emoji。因此为了支持这些应用，我们还需要一份黑白的 emoji 字形，可以从 <a target="_blank" rel="noopener" href="https://github.com/eosrei/twemoji-color-font">TwitterColorEmoji-SVGinOT</a> 中提取。TwitterColorEmoji-SVGinOT 是一个使用 svg 的 Twitter emoji 字体，除了彩色字形之外，还包含了使用程序转换生成的黑白字形。黑白字形的辨识度相对较低，但总比完全无法显示要好得多。</p>
<p>TwemojiMozilla 的 units per em 是 512，而另外两个字体是 2048，因此在合并之前需要对 TwemojiMozilla 中的所有 XY 座标值乘 4。下面是一个简单的 Python 脚本，来实现 hmtx 和 glyf 中的座标值乘 4：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;hmtx_and_glyf.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">	<span class="built_in">print</span>(re.sub(<span class="string">&#x27; (x|y|width|lsb)=&quot;(|-)(\d+)&quot;&#x27;</span>,<span class="keyword">lambda</span> x: <span class="string">&#x27; &#x27;</span>+x.group(<span class="number">1</span>)+<span class="string">&#x27;=&quot;&#x27;</span>+x.group(<span class="number">2</span>)+<span class="built_in">str</span>(<span class="built_in">int</span>(x.group(<span class="number">3</span>))*<span class="number">4</span>)+<span class="string">&#x27;&quot;&#x27;</span> ,line), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>每在 glyf 表里添加一个字形，都需要在 hmtx 、GlyphOrder 和 GDEF 里面添加对应的项，即这四个表的元素数目需要保持一致。</p>
<p>在合并 COLR 之前，需要先合并 CPAL ，然后对 colorID 作相应的映射。原始微软字体中有一些 CPAL 项没有被使用，在合并时可以回收利用这些 colorID。下面是一个简单的 Python 脚本，来实现 CPAL 的合并和 COLR 的 colorID 映射：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;colr_to_add.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">colors = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">	m = re.search(<span class="string">&#x27;&lt;layer colorID=&quot;(\d+?)&quot; name=&#x27;</span>, line)</span><br><span class="line">	<span class="keyword">if</span> m:</span><br><span class="line">		colorID = <span class="built_in">int</span>(m.group(<span class="number">1</span>))</span><br><span class="line">		colors.add(colorID)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;cpal_original.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">cpal = []</span><br><span class="line">available = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">	m = re.search(<span class="string">&#x27;&lt;color index=&quot;\d+?&quot; value=&quot;#([0-9A-F]&#123;6&#125;)[0-9A-F]&#123;2&#125;&quot;/&gt;&#x27;</span>, line)</span><br><span class="line">	<span class="keyword">if</span> m:</span><br><span class="line">		color = m.group(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> color == <span class="string">&#x27;000001&#x27;</span>:</span><br><span class="line">			available.append(<span class="built_in">len</span>(cpal))</span><br><span class="line">		cpal.append(color)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;cpal_to_add.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">cpal2 = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">	m = re.search(<span class="string">&#x27;&lt;color index=&quot;\d+?&quot; value=&quot;#([0-9A-F]&#123;6&#125;)[0-9A-F]&#123;2&#125;&quot;/&gt;&#x27;</span>, line)</span><br><span class="line">	<span class="keyword">if</span> m:</span><br><span class="line">		color = m.group(<span class="number">1</span>)</span><br><span class="line">		cpal2.append(color)</span><br><span class="line"></span><br><span class="line">mapping = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> colors:</span><br><span class="line">	<span class="keyword">if</span> cpal2[i] <span class="keyword">in</span> cpal:</span><br><span class="line">		mapping[i] = cpal.index(cpal2[i])</span><br><span class="line">	<span class="keyword">elif</span> available:</span><br><span class="line">		idx = available.pop()</span><br><span class="line">		cpal[idx] = cpal2[i]</span><br><span class="line">		mapping[i] = idx</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		mapping[i] = <span class="built_in">len</span>(cpal)</span><br><span class="line">		cpal.append(cpal2[i])</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;colr_to_add.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">	<span class="built_in">print</span>(re.sub(<span class="string">&#x27;&lt;layer colorID=&quot;(\d+?)&quot; name=&#x27;</span>,<span class="keyword">lambda</span> x: <span class="string">&#x27;&lt;layer colorID=&quot;&#x27;</span>+<span class="built_in">str</span>(mapping[<span class="built_in">int</span>(x.group(<span class="number">1</span>))])+<span class="string">&#x27;&quot; name=&#x27;</span> ,line), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,color <span class="keyword">in</span> <span class="built_in">enumerate</span>(cpal):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;      &lt;color index=&quot;&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;&quot; value=&quot;#&#x27;</span>+color+<span class="string">&#x27;FF&quot;/&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>原字体 CPAL 中有两张调色板，都需要作相应修改。fontTools 可以自动计算大多数的统计值，但是不支持自动计算 CPAL 里面的 numPaletteEntries，因此需要手动更新这一项。</p>
<p>原字体有数字签名，修改后重新编译的字体数字签名会失效，因此可以删掉最后的 DSIG 表。</p>
<h1 id="安装修改后的字体"><a href="#安装修改后的字体" class="headerlink" title="安装修改后的字体"></a>安装修改后的字体</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="/files/seguiemj_1_31_mod.ttf">seguiemj mod ver 1.31</a></p>
<p><a href="/files/seguiemj_1_33_mod.ttf">seguiemj mod ver 1.33</a></p>
<p>1.31 版适用于 Win10 和 Server 2019/2022，1.33 版适用于 Win11。这两个版本的不同之处在 <a target="_blank" rel="noopener" href="https://blog.emojipedia.org/windows-11-november-2021-emoji-changelog/">emojipedia</a> (<a target="_blank" rel="noopener" href="https://web.archive.org/web/20220206140558/https://blog.emojipedia.org/windows-11-november-2021-emoji-changelog/">Archive</a>) 上有比较详细的说明。</p>
<h2 id="替换系统字体"><a href="#替换系统字体" class="headerlink" title="替换系统字体"></a>替换系统字体</h2><p>使用 copy 命令将字体复制到 %windir%\Fonts 中。为了更好的兼容性，新字体文件名的 ASCII 排序应当在原字体 “seguiemj.ttf” 之前，同时使用 8.3 格式。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> seguiemj_mod.ttf <span class="variable">%windir%</span>\Fonts\segoeemj.ttf</span><br></pre></td></tr></table></figure>

<p>修改下列注册表项，重启系统即可生效。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts&quot; /v &quot;Segoe UI Emoji (TrueType)&quot; /d segoeemj.ttf /f</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>德生 PL660 收音机航空波段扩频</title>
    <url>/2022/02/pl660/</url>
    <content><![CDATA[<p>德生 PL660 收音机航空波段的频率范围是 118-137Mhz，但可以通过一个未公开的方法把频段扩大到 110-137Mhz。</p>
<span id="more"></span>
<p>具体操作如下：在关机状态下依次按下“回车”、“AIR”，会出现一个频率输入界面。输入 110 (或 11) 再按“回车”就能把航空波段范围设置成 110-137Mhz，输入 118 可以恢复成默认的 118-137Mhz。（在固件版本 6215 上测试通过，可能不适用于新固件）</p>
<p>6215 固件 PL660 的其他隐藏功能：<br>关机状态下长按“AIR”，会进入测试程序，屏幕全亮若干秒，然后右上角显示固件版本号。<br>关机状态下长按“SSB”，会显示距离上一次充电之后累计的开机时间。<br>拔掉“Tuning”旋钮，可以看到里面有一个 4 针接口，但作用不明。</p>
]]></content>
      <tags>
        <tag>Hardware</tag>
        <tag>Radio</tag>
      </tags>
  </entry>
  <entry>
    <title>不使用 ADB 远程调试 Chrome/Firefox (需 ROOT)</title>
    <url>/2022/03/f12_noadb/</url>
    <content><![CDATA[<p>安卓版 Chrome 和 Firefox 都需要使用 USB 线连接电脑并且开启 ADB 调试才能使用 F12 开发者工具进行远程调试操作。利用端口转发工具 socat，可以不使用 ADB，直接通过局域网来完成网页的调试。</p>
<span id="more"></span>
<p>在设置里面勾选“远程调试”之后，Chrome 会创建一个抽象(abstract) UNIX Socket，名为 <code>chrome_devtools_remote</code>，同样 Firefox 也会创建一个名为 <code>org.mozilla.fenix/firefox-debugger-socket</code> 的 abstract UNIX Socket。使用 Chrome 进行远程调试实际上执行的是下面的 ADB 指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb forward tcp:9222 localabstract:chrome_devtools_remote</span><br></pre></td></tr></table></figure>

<p>因此只需要使用其他工具将这个 socket 转换为一般的 TCP socket 就可以实现通过网络的浏览器远程调试，在这里我们使用 socat 工具。在一般的 Linux 中，abstract UNIX Socket 没有 ACL 保护，是极不安全的；但在 Android 中开启了 SELinux 并限制了普通 APP 对这类 Socket 的连接操作，因此需要使用 root 或 shell 用户来连接 APP 创建的抽象 Socket。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat abstract-connect:chrome_devtools_remote tcp-listen:9222</span><br></pre></td></tr></table></figure>

<p>运行指令后，在 chrome://inspect/#devices 里面添加 <code>[IP]:9222</code> ，随后就可以直接开始调试。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>SID 卡的后门指令 (APDU)</title>
    <url>/2022/05/sid_card/</url>
    <content><![CDATA[<p>SID 卡具有和 FMCOS 2.0 CPU 卡相似的指令集，同时可以使用后门指令改变 UID 和 ATS。因此，SID 卡可以在门禁等不联网场合实现对 CPU 卡部分功能的克隆。</p>
<span id="more"></span>
<p>帮助内容提取自 <a target="_blank" rel="noopener" href="https://blog.csdn.net/robur/article/details/122294829">CPU卡调试助手</a>。<br>软件内这些内容需要付费才可以查看，程序有加壳，但通过动态调试的方法，可以直接提取出来这些内容。</p>
<h1 id="设置-UID"><a href="#设置-UID" class="headerlink" title="设置 UID"></a>设置 UID</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 DD 00 00 08 1989060492200800</span><br></pre></td></tr></table></figure>
<p>Data 前 4 字节为 UID，第 5 字节为 UID 的 8 位 XOR 校验；最后 3 字节固定为 20 08 00。<br>注意：设置 UID 后必须立即设置 ATS。</p>
<h1 id="设置-ATS"><a href="#设置-ATS" class="headerlink" title="设置 ATS"></a>设置 ATS</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 DD 00 01 10 107880A0022090000000000019890604</span><br></pre></td></tr></table></figure>
<p>Data 最后 4 字节为 UID；UID 必须与设置 UID 命令中的相同。<br>注意：必须先设置 UID，然后再设置 ATS。</p>
<h1 id="准备-擦除-卡片"><a href="#准备-擦除-卡片" class="headerlink" title="准备(擦除)卡片"></a>准备(擦除)卡片</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 00 00 00 00</span><br></pre></td></tr></table></figure>
<p>注意：执行该命令后，请立即执行擦除文件系统命令。</p>
<h1 id="擦除文件系统"><a href="#擦除文件系统" class="headerlink" title="擦除文件系统"></a>擦除文件系统</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">84 0E 00 00 00</span><br></pre></td></tr></table></figure>
<p>擦除包括 MF 在内的整个文件系统，但不包括 UID 和 ATS。<br>注意：请先执行准备（擦除）卡片命令。</p>
<h1 id="设置-SAK-ATQA"><a href="#设置-SAK-ATQA" class="headerlink" title="设置 SAK ATQA"></a>设置 SAK ATQA</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 DE 00 00 03 280400	开启模拟 M1</span><br><span class="line">00 DE 00 00 03 200800	关闭模拟 M1</span><br></pre></td></tr></table></figure>

<h1 id="建立-MF"><a href="#建立-MF" class="headerlink" title="建立 MF"></a>建立 MF</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 E0 3F 00 16 38FFFF0000957AFF315041592E5359532E4444463031</span><br></pre></td></tr></table></figure>
<p>命令结构与普通 CPU 卡相似。Data 前 8 字节勿修改；第 9 字节开始为目录名（5-16字节）。</p>
<h1 id="建立-DF"><a href="#建立-DF" class="headerlink" title="建立 DF"></a>建立 DF</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 E0 20 00 0D 3805200000955BFFA000000001</span><br></pre></td></tr></table></figure>
<p>命令结构与普通 CPU 卡相似。P1P2 为文件标识符。Data 第 2、3 字节为目录空间；第 9 字节开始为目录名（5-16字节）。其余字节勿修改。<br>【特别注意】：SID 卡会自动选择刚建立好的文件（DF/EF）！建立 DF 后，务必重新执行 SELECT 命令，以免误操作！</p>
<h1 id="建立-KEY-文件"><a href="#建立-KEY-文件" class="headerlink" title="建立 KEY 文件"></a>建立 KEY 文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 E0 00 00 07 3F00D00100FFFF</span><br></pre></td></tr></table></figure>
<p>命令结构与普通 CPU 卡相似。Data 第 2、3 字节为文件空间。如无必要不要修改此命令。<br>注意：建立完 KEY 文件，请立即写入对应的（MF/DF）密钥 1 和密钥 2。</p>
<h1 id="写入密钥"><a href="#写入密钥" class="headerlink" title="写入密钥"></a>写入密钥</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 D4 01 00 15 39000FFFFFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE	写入MF密钥1</span><br><span class="line">80 D4 01 00 15 36000FFFFFDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD	写入MF密钥2</span><br><span class="line">80 D4 01 00 15 3900AAFF33BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	写入DF密钥1</span><br><span class="line">80 D4 01 00 15 36000FFFFF8223F83BAF48E07B16ECFC2FD7332E35	写入DF密钥2</span><br></pre></td></tr></table></figure>

<h1 id="建立文件"><a href="#建立文件" class="headerlink" title="建立文件"></a>建立文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 E0 00 10 07 2800080000FFFA	建立二进制文件</span><br></pre></td></tr></table></figure>
<p>命令结构与普通 CPU 卡相似。P1P2 为文件标识符。Data 第 2、3 字节为文件空间。其余字节勿修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 E0 00 20 07 2A02020000FFFA	建立记录文件</span><br></pre></td></tr></table></figure>
<p>命令结构与普通 CPU 卡相似。P1P2 为文件标识符。Data 第 2 字节为记录条目总数，第3字节为每条记录的长度。其余字节勿修改。</p>
<h1 id="Undocumented-指令"><a href="#Undocumented-指令" class="headerlink" title="Undocumented 指令"></a>Undocumented 指令</h1><p>通过脚本遍历所有的 Cla 和 Ins，发现 SID 卡还会响应下列 Undocumented 指令。<br>这些指令作用未知，请谨慎使用。已知其中的某个指令可以实现锁卡，锁卡之后所有的后门指令失效，返回错误码 6D00</p>
<table>
<thead>
<tr>
<th>Cla</th>
<th>Ins</th>
</tr>
</thead>
<tbody><tr>
<td>84</td>
<td>3C</td>
</tr>
<tr>
<td>00</td>
<td>3D</td>
</tr>
<tr>
<td>00</td>
<td>7D</td>
</tr>
<tr>
<td>84</td>
<td>CD</td>
</tr>
<tr>
<td>00</td>
<td>DF</td>
</tr>
<tr>
<td>84</td>
<td>F0</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>RFID</tag>
      </tags>
  </entry>
  <entry>
    <title>诺基亚贝尔 G-1425-MA 移动 GPON 光猫 get shell</title>
    <url>/2022/05/pon_getshell/</url>
    <content><![CDATA[<p>以前的光猫直接拆机接 TTL 串口里面直接就是 /bin/sh ，新版光猫改成了一个受限的 shell，不知道密码几乎无法进行任何操作。</p>
<span id="more"></span>
<h1 id="通过-TTL-串口获得-shell"><a href="#通过-TTL-串口获得-shell" class="headerlink" title="通过 TTL 串口获得 shell"></a>通过 TTL 串口获得 shell</h1><p>拆开机器，找到并连接 TTL 串口。</p>
<img data-src="/images/GPON1.jpg" width="50%" height="50%" title="G-1425-MA_UART" alt="G-1425-MA_UART"/>

<p>设备在开机后，串口有 CFE 和 Linux 内核的输出。CFE 有密码，启动完成后得到一个受限的 shell (vtysh)，只能运行 <code>ifconfig, ip, route, ping, nslookup, ps, top</code> 这几个命令。</p>
<img data-src="/images/GPON2.png" width="50%" height="50%" title="Limited_shell" alt="Limited_shell"/>

<p>输入 <code>enable</code> 不需要密码，里面的 <code>user</code> 指令不允许添加用户，<code>shell</code> 指令需要密码，并且连续输错 3 次会锁定登录 300s。这样就只能从允许使用的这几个命令里面下手。</p>
<img data-src="/images/GPON3.png" width="50%" height="50%" title="hint" alt="hint"/>

<p>输入 <code>ip</code> 回车之后，发现 ip 命令支持 netns，输入以下指令，就可以得到 shell 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip netns add 8964</span><br><span class="line">ip netns exec 8964 /bin/sh</span><br></pre></td></tr></table></figure>

<p>由于 shell 使用了一个空的网络命名空间，因此无法用这个 shell 进行网络配置。但我们可以使用这个 shell 来进行其他所有操作并从中获取密码。</p>
<h1 id="密码获取"><a href="#密码获取" class="headerlink" title="密码获取"></a>密码获取</h1><p>输入 <code>cfgcli -a</code> 提取设置，寻找形如<code>&lt;Password ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;LZ8gkScDdQUp2k+it/ADtw==&quot; ealgo=&quot;ab&quot;&gt;&lt;/Password&gt;</code>的项，<code>v=</code>里面就是加密后的密码。使用 <a target="_blank" rel="noopener" href="https://broadbandforum.co/threads/nokia-g-2425g-a-unlock-root-step-by-step-detailed-guide.213439/">nokia-router-cfg-tool.py</a> 进行解密得到明文密码。</p>
<p>由此可以得到密码如下：</p>
<blockquote>
<p>串口 shell 密码 LA(ImvZx%8<br>Web CMCCAdmin 默认密码 aDm8H%MdA<br>CFE 用户名 telecomadmin 密码 nE7jA%5m （该密码无法从设置里面获取）</p>
</blockquote>
<p>得到密码后，就可以在串口的 vtysh 里面依次输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable</span><br><span class="line">shell</span><br><span class="line">LA(ImvZx%8</span><br></pre></td></tr></table></figure>

<p>得到一个可以正常进行网络配置的 shell。</p>
<h1 id="附：得到密码之后可以进行的操作"><a href="#附：得到密码之后可以进行的操作" class="headerlink" title="附：得到密码之后可以进行的操作"></a>附：得到密码之后可以进行的操作</h1><h2 id="设置优化"><a href="#设置优化" class="headerlink" title="设置优化"></a>设置优化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置 RMS 注册成功</span><br><span class="line">cfgcli -s InternetGatewayDevice.X_CT-COM_UserInfo.Status 0</span><br><span class="line">cfgcli -s InternetGatewayDevice.X_CT-COM_UserInfo.Result 1</span><br><span class="line"># 关闭 JVM</span><br><span class="line">cfgcli -s InternetGatewayDevice.SoftwareModules.ExecEnv.1.Enable false</span><br><span class="line">cfgcli -s InternetGatewayDevice.SoftwareModules.ExecEnv.2.Enable false</span><br><span class="line"># 最大客户端连接数 200</span><br><span class="line">cfgcli -s InternetGatewayDevice.Services.X_CT-COM_MWBAND.TotalTerminalNumber 200</span><br><span class="line"># 关闭环路检测</span><br><span class="line">cfgcli -s InternetGatewayDevice.LANDevice.1.X_CT-COM_LoopbackDetection.LoopbackEnable false</span><br></pre></td></tr></table></figure>

<h2 id="开机启动脚本"><a href="#开机启动脚本" class="headerlink" title="开机启动脚本"></a>开机启动脚本</h2><p>光猫的 init 会在最后调用 /config/postapp.sh 脚本，可以创建这个文件并写入自定义的开机启动项。</p>
<h2 id="开启-SSH"><a href="#开启-SSH" class="headerlink" title="开启 SSH"></a>开启 SSH</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cfgcli -s InternetGatewayDevice.DeviceInfo.X_CT-COM_ServiceManage.SSHEnable true</span><br></pre></td></tr></table></figure>
<p>在 /etc/passwd 里面添加名为 user，UID 为 0 的账户，并用 passwd user 设置密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user:x:0:0:Linux User,,,:/home/root:/bin/sh</span><br></pre></td></tr></table></figure>
<p>删除 iptables 里面 22 端口的 REJECT 项（放入开机启动脚本），然后就可以使用 user 账户进行 ssh 连接。</p>
<h2 id="一些调试用-Web-页面"><a href="#一些调试用-Web-页面" class="headerlink" title="一些调试用 Web 页面"></a>一些调试用 Web 页面</h2><p>下列页面需要使用超级用户登录才能使用，user 用户访问会跳回登录页面</p>
<p>开启 Telnet<br><a target="_blank" rel="noopener" href="http://192.168.1.1/system.cgi?telnet">http://192.168.1.1/system.cgi?telnet</a><br>Dump 设置<br><a target="_blank" rel="noopener" href="http://192.168.1.1/dumpdatamodel.cgi">http://192.168.1.1/dumpdatamodel.cgi</a><br>修改省份<br><a target="_blank" rel="noopener" href="http://192.168.1.1/opid_setting.cgi?set">http://192.168.1.1/opid_setting.cgi?set</a></p>
]]></content>
  </entry>
  <entry>
    <title>为小米 IoT 模块编译自定义固件 (ESP32)</title>
    <url>/2023/06/miot_custom_fw/</url>
    <content><![CDATA[<p>使用小米模组的第三方智能设备需要接入米家才能使用，通过编译和刷入自定义固件，可以实现不依赖小米云服务器的纯本地控制。</p>
<span id="more"></span>

<h2 id="固件编写"><a href="#固件编写" class="headerlink" title="固件编写"></a>固件编写</h2><p>这类设备的硬件架构通常是小米 IoT 模块和主控 MCU 通过一组 UART 进行通信，在 <a target="_blank" rel="noopener" href="https://iot.mi.com/new/doc/accesses/direct-access/embedded-development/wifi/module-dev/serial-communication">小米 IoT 开发者平台</a> 里面可以查到具体协议。因此自定义固件只需要不断读取并解析串口内容，并根据通信协议为 MCU 的指令生成响应。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;HardwareSerial.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">HardwareSerial <span class="title">SerialPort</span><span class="params">(<span class="number">2</span>)</span></span>; <span class="comment">// use UART2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SerialPort.begin(<span class="number">115200</span>, SERIAL_8N1, <span class="number">16</span>, <span class="number">17</span>); <span class="comment">// GPIO 16,17</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">char</span> lineBuffer[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">while</span>(SerialPort.available()) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = SerialPort.readBytesUntil(<span class="string">&#x27;\r&#x27;</span>, lineBuffer, <span class="keyword">sizeof</span>(lineBuffer) - <span class="number">1</span>);</span><br><span class="line">        lineBuffer[length] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(lineBuffer, <span class="string">&quot;model&quot;</span>, <span class="number">5</span>))</span><br><span class="line">            HandleModel(...);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(lineBuffer, <span class="string">&quot;mcu_version&quot;</span>, <span class="number">11</span>))</span><br><span class="line">            SerialPort.print(<span class="string">&quot;ok\r&quot;</span>); <span class="comment">// do nothing</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (...)</span><br><span class="line">            HandleXX(...);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SerialPort.print(<span class="string">&quot;error\r&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译和刷入"><a href="#编译和刷入" class="headerlink" title="编译和刷入"></a>编译和刷入</h2><p>小米 ESP32 模块和一般的 ESP32-WROOM-32D 模块不一样，其中的 Core1 被屏蔽了，只能单核运行；另外 efuse blk0 的校验和也是不正确的，运行原版 esp-idf 会报错。因此需要使用 patch 过的 sdk 来编译 (<a target="_blank" rel="noopener" href="https://github.com/mmakaay/arduino-esp32-unicore-no-mac-crc/tree/main">https://github.com/mmakaay/arduino-esp32-unicore-no-mac-crc/tree/main</a>)</p>
<p>刷入固件的过程和普通的 ESP32 相同，拉低 GPIO0 进入串口刷机模式，用 esptool 即可实现烧录。在刷之前可以先备份原厂固件：<code>esptool --port /dev/ttyUSBx --baud 512000 read_flash 0 0x400000 backup.bin</code>，同时保存一下原厂固件的串口输出。</p>
<h2 id="通过-IoT-模块控制设备"><a href="#通过-IoT-模块控制设备" class="headerlink" title="通过 IoT 模块控制设备"></a>通过 IoT 模块控制设备</h2><p>在 miot 中，对设备的控制是通过 set_properties 和 get_properties 命令实现的。根据设备型号去 <a target="_blank" rel="noopener" href="https://home.miot-spec.com/spec/%7Bmodel%7D">https://home.miot-spec.com/spec/{model}</a> 查询支持的属性及其对应的 SIID 和 PIID，利用这些信息就可以实现对设备的控制。</p>
]]></content>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Windows 10/11 中关闭和开启 Ctrl+Alt+Delete 菜单</title>
    <url>/2022/09/DisableCAD/</url>
    <content><![CDATA[<p>遇到了一台有奇怪问题的设备，按 Ctrl+Alt+Delete 机器没有任何反应，除此之外一切正常。</p>
<span id="more"></span>

<p>这个问题由于找不到合适的关键词，没法通过搜索引擎检索答案，最终通过注册表全局搜索，找到了一个可疑目标：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE\SystemProtected</code> 下面存在一个 DWORD 值 DisableCAD 为 1。测试发现它就是 Ctrl+Alt+Delete 菜单的开关：将 DisableCAD 设置为 1 时通过其他任何方法均无法调出 CAD 菜单。将 DisableCAD 设置为 0 或者直接删除可以恢复默认行为，允许 CAD 菜单。</p>
<p>出现这种情况的机器，如果不是病毒造成的，通常是因为 user OOBE 过程没有正确完成。可能是装系统时采用错误方式跳过了微软账号登录，使用 unattend.xml 自动安装也可能会导致这一问题。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>手动控制 Arduino Leonardo 的 Tx/Rx LED</title>
    <url>/2022/11/arduino_mega32u4/</url>
    <content><![CDATA[<p>Arduino Leonardo 等使用 mega32u4 的开发板使用的是 MCU 原生的 USB CDC 串口，上面的 Tx/Rx LED 直接连接到 GPIO。通过删除控制 LED 闪烁的代码，这些 GPIO 就可以用作其他用途。</p>
<span id="more"></span>

<p>找到硬件包里面的<code>cores/arduino/USBCore.cpp</code>文件，根据下面的 diff 删内容：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/USBCore.cpp</span></span><br><span class="line"><span class="comment">+++ b/USBCore.cpp</span></span><br><span class="line"><span class="meta">@@ -23,11 +23,6 @@</span></span><br><span class="line"></span><br><span class="line"> #if defined(USBCON)</span><br><span class="line"></span><br><span class="line"><span class="deletion">-/** Pulse generation counters to keep track of the number of milliseconds remaining for each pulse type */</span></span><br><span class="line"><span class="deletion">-#define TX_RX_LED_PULSE_MS 100</span></span><br><span class="line"><span class="deletion">-volatile u8 TxLEDPulse; /**&lt; Milliseconds remaining for data Tx LED pulse */</span></span><br><span class="line"><span class="deletion">-volatile u8 RxLEDPulse; /**&lt; Milliseconds remaining for data Rx LED pulse */</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"> //<span class="comment">==================================================================</span></span><br><span class="line"> //<span class="comment">==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -122,16 +117,10 @@</span></span><br><span class="line"> &#123;</span><br><span class="line">        while (count--)</span><br><span class="line">                *data++ = UEDATX;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-       RXLED1;                                 // light the RX LED</span></span><br><span class="line"><span class="deletion">-       RxLEDPulse = TX_RX_LED_PULSE_MS;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> static inline u8 Recv8()</span><br><span class="line"> &#123;</span><br><span class="line"><span class="deletion">-       RXLED1;                                 // light the RX LED</span></span><br><span class="line"><span class="deletion">-       RxLEDPulse = TX_RX_LED_PULSE_MS;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">        return UEDATX;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -331,8 +320,6 @@</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="deletion">-       TXLED1;                                 // light the TX LED</span></span><br><span class="line"><span class="deletion">-       TxLEDPulse = TX_RX_LED_PULSE_MS;</span></span><br><span class="line">        return r;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -772,12 +759,6 @@</span></span><br><span class="line">        if (udint &amp; (1&lt;&lt;SOFI))</span><br><span class="line">        &#123;</span><br><span class="line">                USB_Flush(CDC_TX);                              // Send a tx frame if found</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-               // check whether the one-shot period has elapsed.  if so, turn off the LED</span></span><br><span class="line"><span class="deletion">-               if (TxLEDPulse &amp;&amp; !(--TxLEDPulse))</span></span><br><span class="line"><span class="deletion">-                       TXLED0;</span></span><br><span class="line"><span class="deletion">-               if (RxLEDPulse &amp;&amp; !(--RxLEDPulse))</span></span><br><span class="line"><span class="deletion">-                       RXLED0;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // the WAKEUPI interrupt is triggered as soon as there are non-idle patterns on the data</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之后就可以分别通过 IO 编号 17/30 操作 RX/TX 的亮灭。除此之外，ISP 接口上还有三个可用的 GPIO 14, 15, 16，在缺 GPIO 时也可以用上。</p>
<p>注意：由于没有对 Bootloader 进行修改，在 Bootloader 模式下这些 GPIO 仍然是 LED 的功能。</p>
]]></content>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
</search>
